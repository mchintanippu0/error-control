
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author apple
 */
public class SAWServer extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form Server
     */
    public SAWServer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        btnStart = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtFolder = new javax.swing.JTextField();
        btnExit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLogs = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SAW Server");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Information"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel1.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(txtPort, gridBagConstraints);

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel1.add(btnStart, gridBagConstraints);

        jLabel2.setText("Folder");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel1.add(jLabel2, gridBagConstraints);

        txtFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFolderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(txtFolder, gridBagConstraints);

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel1.add(btnExit, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        txtLogs.setEditable(false);
        txtLogs.setColumns(20);
        txtLogs.setRows(5);
        jScrollPane1.setViewportView(txtLogs);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFolderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFolderActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        startServer();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SAWServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SAWServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SAWServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SAWServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SAWServer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnStart;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtFolder;
    private javax.swing.JTextArea txtLogs;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables

    private void startServer() {
        try {
            port = Integer.parseInt(txtPort.getText());
            this.saveFolder = txtFolder.getText();
            if (port < 1000 || port > 65535) {
                JOptionPane.showMessageDialog(null, "Part range: 1000 ~ 65535");
                return;
            }

            if (!(new File(this.saveFolder)).exists()) {
                JOptionPane.showMessageDialog(null, this.saveFolder + " not exists");
                return;
            }

            new Thread(this).start();

            btnStart.setEnabled(false);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
            return;
        }

    }

    @Override
    public void run() {
        try {
            info("SAW Receiver start!");
            reciever = new ServerSocket(port);
            while (true) {
                info("waiting for connection...");
                client = reciever.accept();

                info("Connection established!");

                OutputStream os = client.getOutputStream();
                os.flush();
                InputStream in = client.getInputStream();

                String filename = String.format("%s%s%s", this.saveFolder, System.getProperty("file.separator"), "COSC635_P2_DataRecieved.txt");

                FileOutputStream fos = new FileOutputStream(filename);

                byte sequence = 0;

                do {
                    try {
                        // read from client
                        int iReadLen = in.read(buffer, 0, NetworkPacket.PACKET_SIZE);
                        if (iReadLen < 1) {
                            info("Read error!");
                            break;
                        }
                        if (!packet.parse(buffer)) {
                            info(packet.error);
                            break;
                        }
                        if (packet.sequence != sequence) {
                            info("Sequence number error! expected: " + sequence + ", got: " + packet.sequence);
                            break;
                        } else {
                            // if received packet type is data, write data to file and send ack to client.
                            if (packet.type == NetworkPacket.TYPE_DATA) {
                                fos.write(packet.data, 0, packet.size);
                            }
                            buffer = NetworkPacket.build(NetworkPacket.TYPE_ACK, packet.sequence, null, 0);
                            os.write(buffer, 0, NetworkPacket.PACKET_SIZE);
                            sequence++;
                        }
                    } catch (Exception e) {
                        info("Error! " + e.getMessage());
                        break;
                    }
                } while (packet.type != NetworkPacket.TYPE_END);
                client.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected int port;
    protected NetworkPacket packet;
    protected byte[] buffer;
    protected String saveFolder;
    protected boolean stop = false;

    protected ServerSocket reciever;
    protected Socket client = null;

    private void info(String log) {
        txtLogs.append(log + "\r\n");
    }
}
